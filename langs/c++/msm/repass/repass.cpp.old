#include <algorithm>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <map>
#include <numeric>
#include <sstream>
#include <stdint.h>
#include <string>
#include <vector>

using namespace std;

// back-end
#include <boost/msm/back/state_machine.hpp>
//front-end
#include <boost/msm/front/state_machine_def.hpp>
#include <boost/msm/front/functor_row.hpp>
#include <boost/msm/front/euml/euml.hpp>

namespace msm = boost::msm;
namespace mpl = boost::mpl;
using namespace msm::front;

// events
struct reach_changed {
  reach_changed(int reach):
    _reach(reach)
  {}
  int _reach;
};


// front-end: define the FSM structure 
struct RepassImp_ : public msm::front::state_machine_def<RepassImp_>
{
  static const int _start_fill_reach = 20;
  static const int min_delta_payout = 5;
  static const int min_delta_repass = 5;

  int _last_drag_length;
  int _min_drag_length;
  int _max_drag_length;
  int _total_drag_length;

  struct Initial : public msm::front::state<> 
  {
    template <class Event,class FSM>
      void on_entry(Event const&,FSM& fsm ) {
//        std::cout << "entering: Initial" << std::endl;
        fsm._last_drag_length = FSM::_start_fill_reach;
        fsm._min_drag_length = FSM::_start_fill_reach;
        fsm._max_drag_length = FSM::_start_fill_reach;

      }
//    template <class Event,class FSM>
 //     void on_exit(Event const&,FSM& ) {std::cout << "leaving: Initial" << std::endl;}
  };

  struct LookPayout : public msm::front::state<>{};

  /*
  struct LookPayout : public msm::front::state<> 
  {
    template <class Event,class FSM>
      void on_entry(Event const&,FSM& ) {std::cout << "entering LookPayout" << std::endl;}
    template <class Event,class FSM>
      void on_exit(Event const&,FSM& ) {std::cout << "leaving: LookPayout" << std::endl;}
  };
  */


  struct LookRepass : public msm::front::state<> 
  {
//    template <class Event,class FSM>
//      void on_entry(Event const&,FSM& ) {std::cout << "entering: LookRepass" << std::endl;}
//    template <class Event,class FSM>
//      void on_exit(Event const&,FSM& ) {std::cout << "leaving: LookRepass" << std::endl;}
  };

  struct increment
  {
    template <typename EVT, typename FSM, typename SourceState, typename TargetState>
      void operator()(EVT const& evt, FSM& fsm, SourceState&, TargetState&)
      {
        cout << "increment (reach " << evt._reach << ")\n";
        fsm._total_drag_length += abs(fsm._last_drag_length - evt._reach);
      }
  };

  struct save
  {
    template <typename EVT, typename FSM, typename SourceState, typename TargetState>
      void operator()(EVT const& evt, FSM& fsm, SourceState&, TargetState&)
      {
        cout << "save (reach " << evt._reach << ")\n";
        fsm._last_drag_length = evt._reach;
        fsm._min_drag_length = std::min(fsm._min_drag_length, evt._reach);
        fsm._max_drag_length = std::max(fsm._max_drag_length, evt._reach);
      }
  };

  struct publish_repass
  {
    template <typename EVT, typename FSM, typename SourceState, typename TargetState>
      void operator()(EVT const& evt, FSM& fsm, SourceState&, TargetState&)
      {
        cout << "publish_repass (reach " << evt._reach << ")\n";
      }
  };

#define GUARD(name, predicate) struct name {\
     template <class EVT, class FSM, class SourceState, class TargetState>\
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& ) {\
        return predicate;\
      }\
};

  GUARD(dragging_in_min, evt._reach < fsm._min_drag_length);

  /*
  struct dragging_in_min {
    template <class EVT, class FSM, class SourceState, class TargetState>
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& ) {
        return evt._reach < fsm._min_drag_length;
      }
  };
*/
  struct dragging_in
  {
    template <class EVT, class FSM, class SourceState, class TargetState>
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& )
      {
        return evt._reach < fsm._last_drag_length;
      }
  };

  struct found_payout
  {
    template <class EVT, class FSM, class SourceState, class TargetState>
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& )
      {
        return evt._reach > fsm._min_drag_length + FSM::min_delta_payout;
      }
  };

  struct paying_out_max
  {
    template <class EVT, class FSM, class SourceState, class TargetState>
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& )
      {
        return evt._reach > fsm._max_drag_length;
      }
  };

  struct found_repass
  {
    template <class EVT, class FSM, class SourceState, class TargetState>
      bool operator()(EVT const& evt ,FSM& fsm,SourceState& ,TargetState& )
      {
        return evt._reach < fsm._max_drag_length - FSM::min_delta_repass;
      }
  };

  RepassImp_()
  {}

  template <class Event,class FSM>
    void on_entry(Event const& ,FSM&) { std::cout << "entering: Repass" << std::endl; }
  template <class Event,class FSM>
    void on_exit(Event const&,FSM& ) { std::cout << "leaving: Repass" << std::endl; }

  // the initial state . Must be defined
  typedef Initial initial_state;

  // typedef RepassImp_ r; // makes transition table cleaner
  typedef ActionSequence_<mpl::vector<increment, save> > increment_save;

  struct transition_table : 
    mpl::vector<
    Row<Initial, none, LookPayout, none, none>,
    Row<LookPayout, reach_changed, LookPayout, increment_save, dragging_in_min>,
    Row<LookPayout, reach_changed, LookRepass, save, found_payout>,
    Row<LookRepass, reach_changed, LookRepass, save,  paying_out_max>,
    Row<LookRepass, reach_changed, LookRepass, increment_save, dragging_in >,
    Row<LookRepass, reach_changed, Initial, publish_repass, found_repass >
    > {};

  // Replaces the default no-transition response.
  /*
     template <class FSM,class Event>
     void no_transition(Event const&, FSM&,int)
     {
     throw "no_transition called!";
     }                
     */
};

typedef msm::back::state_machine<RepassImp_> Repass;

int main(int argc, char **argv)
{
  // Pick a back-end                                                                                            
  try
  {
    Repass r;
    r.start();

    int i;
    for (i = 0; i < 99; ++i)
    {
      double reach = 20.0 - 10.0 * sin((double)i / 10.0);
      cout << "[" << reach << "]: ";
      r.process_event(reach_changed(reach));
      cout << "\n";
    }
  }
  catch (const char* c)
  {
    std::cerr << c << std::endl;
  }
  return 0;
}
